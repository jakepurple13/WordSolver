plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "com.google.protobuf" version "0.9.4"
    id 'kotlinx-serialization'
    //id "com.starter.easylauncher" version "5.1.2"
    id "io.github.jakepurple13.ProjectInfo"
    id "org.jetbrains.kotlin.plugin.compose"
}

android {
    namespace 'com.programmersbox.wordsolver'
    compileSdk 36

    defaultConfig {
        applicationId "com.programmersbox.wordsolver"
        minSdk 23
        targetSdk 36
        versionCode 12
        versionName "1.11"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables { useSupportLibrary true }
        buildConfigField "String", "IP4_ADDRESS", "\"http://${getIP()}:8080\""
        buildConfigField "String", "IP4_ADDRESS_NO_PORT", "\"${getIP()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        beta {
            initWith debug
            matchingFallbacks = ['debug', 'release']
            debuggable false
        }
        lanVersion {
            initWith debug
            matchingFallbacks = ['debug', 'release']
            applicationIdSuffix = ".lanVersion"
            versionNameSuffix = "-lanVersion"
        }
    }

    /*easylauncher {
        defaultFlavorNaming true
        buildTypes {
            beta { filters chromeLike(gravity: "Top") }
            lanVersion {
                filters chromeLike(gravity: "Top")
                enable true
            }
        }
    }*/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

projectInfo {
    excludeFileTypes.add("txt")
}

dependencies {
    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.1'
    implementation 'androidx.activity:activity-compose:1.10.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.3.2'
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.36.0"
    implementation "androidx.glance:glance-appwidget:1.1.1"

    implementation 'com.canopas.intro-showcase-view:introshowcaseview:1.0.7'

    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.9.1"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.9.1"

    implementation "io.ktor:ktor-client-core:3.1.3"
    implementation "io.ktor:ktor-client-cio:3.1.3"
    implementation "io.ktor:ktor-client-content-negotiation:3.1.3"
    implementation "io.ktor:ktor-serialization-kotlinx-json:3.1.3"
    implementation "io.ktor:ktor-client-logging:3.1.3"
    implementation "com.google.code.gson:gson:2.13.1"

    implementation "androidx.datastore:datastore:1.1.7"
    implementation "androidx.datastore:datastore-preferences:1.1.7"

    implementation "com.google.protobuf:protobuf-javalite:3.24.4"
    implementation "com.google.protobuf:protobuf-kotlin-lite:3.24.4"

    /*lanVersionImplementation(project(":chatfunctionality"))
    debugImplementation(project(":chatfunctionalitynoop"))
    releaseImplementation(project(":chatfunctionalitynoop"))
    betaImplementation(project(":chatfunctionalitynoop"))*/
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.24.4"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
                kotlin {
                    option 'lite'
                }
            }
        }
    }
}

static def getIP() {
    InetAddress result = null
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses()
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement()
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress()
                } else if (result == null) {
                    result = address
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress()
}
